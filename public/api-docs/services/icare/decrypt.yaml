openapi: 3.0.0
info:
  title: iCare API - Decrypt Response Guide
  version: 1.0.0
  description: |
    # iCare API - How to Decrypt Response
    
    ## Overview
    
    Response kembalian dari web service iCare sudah dalam bentuk terkompresi dan terenkripsi.
    
    - Kompresi service menggunakan metode: **Lz-string**
    - Enkripsi menggunakan metode: **AES 256 (mode CBC) - SHA256**
    - Key enkripsi: `consid + conspwd + timestamp request` (concatenate string)
    
    ## Langkah Proses Decrypt Data Response
    1. **Dekripsi**: AES 256 (mode CBC) - SHA256
    2. **Dekompresi**: Lz-string (decompressFromEncodedURIComponent)
    
    **Key:** `consid + conspwd + timestamp request` (concatenate string)
    
    ## Code Examples
    
    ### Java
    ```java
    import java.nio.charset.StandardCharsets;
    import java.security.InvalidAlgorithmParameterException;
    import java.security.InvalidKeyException;
    import java.security.MessageDigest;
    import java.security.NoSuchAlgorithmException;
    import java.util.Base64;

    import javax.crypto.BadPaddingException;
    import javax.crypto.Cipher;
    import javax.crypto.IllegalBlockSizeException;
    import javax.crypto.NoSuchPaddingException;
    import javax.crypto.SecretKey;
    import javax.crypto.spec.IvParameterSpec;
    import javax.crypto.spec.SecretKeySpec;

    public class Enc {
    
        public static final String ALGORITHM = "AES/CBC/PKCS5Padding";
    
        public static SecretKeySpec generateKey(String key) throws Exception {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] _hashKey = digest.digest(key.getBytes(StandardCharsets.UTF_8));
            byte[] _hashIv = new byte[16];
            for (int i = 0; i < 16; i++) {
                _hashIv[i] = _hashKey[i];
            }
            return new SecretKeySpec(_hashKey, "AES");
        }
    
        public static String decrypt(String cipherText, SecretKeySpec key, IvParameterSpec iv) throws Exception {
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            cipher.init(Cipher.DECRYPT_MODE, key, iv);
            byte[] plainText = cipher.doFinal(Base64.getDecoder().decode(cipherText));
            return new String(plainText);
        }
        // Setelah dekripsi, lakukan dekompresi:
        // String respon = LZString.decompressFromEncodedURIComponent(lzString);
    }
    ```

    ### PHP
    ```php
    require_once 'vendor/autoload.php';

    function stringDecrypt($key, $string){
        $encrypt_method = 'AES-256-CBC';
        $key_hash = hex2bin(hash('sha256', $key));
        $iv = substr(hex2bin(hash('sha256', $key)), 0, 16);
        $output = openssl_decrypt(base64_decode($string), $encrypt_method, $key_hash, OPENSSL_RAW_DATA, $iv);
        return $output;
    }

    // decompress
    // download libraries lzstring : https://github.com/nullpunkt/lz-string-php
    function decompress($string){
        return \LZCompressor\LZString::decompressFromEncodedURIComponent($string);
    }
    ```

    ### C#
    ```csharp
    using System;
    using System.IO;
    using System.Security.Cryptography;
    using System.Text;

    public class Decryptor {
        public string Decrypt(string key, string data) {
            string decData = null;
            byte[][] keys = GetHashKeys(key);
            try {
                decData = DecryptStringFromBytes_Aes(data, keys[0], keys[1]);
            } catch (CryptographicException) { }
            catch (ArgumentNullException) { }
            return decData;
        }
        private static string DecryptStringFromBytes_Aes(string cipherTextString, byte[] Key, byte[] IV) {
            byte[] cipherText = Convert.FromBase64String(cipherTextString);
            string plaintext = null;
            using (Aes aesAlg = Aes.Create()) {
                aesAlg.Key = Key;
                aesAlg.IV = IV;
                ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);
                using (MemoryStream msDecrypt = new MemoryStream(cipherText)) {
                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read)) {
                        using (StreamReader srDecrypt = new StreamReader(csDecrypt)) {
                            plaintext = srDecrypt.ReadToEnd();
                        }
                    }
                }
            }
            return plaintext;
        }
        private byte[][] GetHashKeys(string key) {
            byte[][] result = new byte[2][];
            Encoding enc = Encoding.UTF8;
            SHA256 sha2 = new SHA256CryptoServiceProvider();
            byte[] rawKey = enc.GetBytes(key);
            byte[] hashKey = sha2.ComputeHash(rawKey);
            byte[] hashIV = sha2.ComputeHash(rawKey);
            Array.Resize(ref hashIV, 16);
            result[0] = hashKey;
            result[1] = hashIV;
            return result;
        }
        // Setelah dekripsi, lakukan dekompresi:
        // string result = LZString.decompressFromEncodedURIComponent(LZDecrypted);
    }
    ```

    ### Python
    ```python
    import hashlib
    from Crypto.Cipher import AES
    import base64
    import lzstring

    def decrypt(key, txt_enc):
        x = lzstring.LZString()
        key_hash = hashlib.sha256(key.encode('utf-8')).digest()
        mode = AES.MODE_CBC
        decryptor = AES.new(key_hash[0:32], mode, IV=key_hash[0:16])
        plain = decryptor.decrypt(base64.b64decode(txt_enc))
        decompress = x.decompressFromEncodedURIComponent(plain.decode('utf-8'))
        return decompress
    ```

servers:
  - url: http://localhost:3001/api/bpjs/ihs_dev
    description: Proxy Backend Local

paths:
  /decrypt:
    get:
      tags: [Decryption]
      summary: How to Decrypt Response
      description: |
        Panduan untuk melakukan dekripsi response dari iCare API.
        
        1. Dekripsi: AES 256 (mode CBC) - SHA256
        2. Dekompresi: Lz-string (decompressFromEncodedURIComponent)
        
        Key: `consid + conspwd + timestamp request` (concatenate string)
      responses:
        '200':
          description: Decrypt guide
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Decrypt guide"
                  steps:
                    type: string
                    example: "AES-256-CBC decryption, then LZ-string decompress"
