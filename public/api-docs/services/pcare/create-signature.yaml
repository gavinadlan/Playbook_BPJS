openapi: 3.0.0
info:
  title: PCare API - Create Signature Guide
  version: 1.0.0
  description: |
    # PCare API Authentication & Signature Generation Guide
    
    ## Overview
    
    Secara umum, hampir setiap pemanggilan web-service PCare, harus dicantumkan beberapa variabel yang dibutuhkan untuk menambahkan informasi ataupun untuk proses validasi yang dikirim pada HTTP Header.
    
    ## Required Headers
    
    | No | Nama Header | Nilai | Keterangan |
    |----|-------------|-------|------------|
    | 1 | X-cons-id | 743627386 | consumer ID dari BPJS Kesehatan |
    | 2 | X-timestamp | 234234234 | generated unix-based timestamp |
    | 3 | X-signature | DogC5UiQurNcigrBdQ3QN5oYvXeUF5E82I/LHUcI9v0= | generated signature dengan pola HMAC-256 |
    | 4 | X-authorization | MDkwMzA0MDI6UXdlcnR5MSE6MDk1 | generated signature dengan pola Base64 |
    | 5 | user_key | d795b04f4a72d74fae727be9da0xxxxx | user_key untuk akses webservice |
    
    ## Header Details
    
    ### 1. X-cons-id
    Merupakan kode consumer (pengakses web-service). Kode ini akan diberikan oleh BPJS Kesehatan.
    
    ### 2. X-timestamp
    Merupakan waktu yang akan di-generate oleh client saat ingin memanggil setiap service. Format waktu ini ditulis dengan format unix-based-time (berisi angka, tidak dalam format tanggal sebagaimana mestinya). Format waktu menggunakan Coordinated Universal Time (UTC), dalam penggunaannya untuk mendapatkan timestamp, rumus yang digunakan adalah (local time in UTC timezone in seconds) - (1970-01-01 in seconds).
    
    ### 3. X-signature
    Merupakan hasil dari pembuatan signature yang dibuat oleh client. Signature yang digunakan menggunakan pola HMAC-SHA256.
    
    ### 4. X-authorization
    Merupakan kombinasi dari username dan password dari aplikasi yang akan di bridging (PCare), dan untuk menghasilkan enkripsi dari authorization dapat menggunakan pola Base64 Basic.
    
    ```
    username : usernamePcare
    password : passwordPcare
    kdAplikasi : 095
    Authorization : Base64(username:password:kdAplikasi)
    ```
    
    ### 5. user_key
    Merupakan key untuk mengakses webservice. Setiap service consumer memiliki user_key masing-masing.
    
    ## Consumer Credentials
    
    Untuk dapat mengakses web-service dari BPJS Kesehatan (service provider), pemanggil web service (service consumer) akan mendapatkan:
    - **Consumer ID**
    - **Consumer Secret**
    
    Informasi Consumer Secret, hanya disimpan oleh service consumer. Tidak dikirim ke server web-service, hal ini untuk menjaga pengamanan yang lebih baik. Sedangkan kebutuhan Consumer Secret ini adalah untuk men-generate Signature (X-signature).
    
    ## Signature Generation Process
    
    ### Step 1: Prepare Variables
    ```
    consumerID : 1234
    consumerSecret : pwd
    timestamp : 433223232
    variabel1 : consumerID & timestamp
    variabel1 : 1234&433223232
    ```
    
    ### Step 2: Generate Signature
    ```
    Signature : HMAC-256(value:key)
    value : variabel1
    key : consumerSecret
    Signature : HMAC-256(variabel1:consumerSecret)
    ```
    
    Metode signature yang digunakan adalah menggunakan HMAC-SHA256, dimana paramater saat generate signature dibutuhkan parameter message dan key.
    
    ### Example HMAC-SHA256 Generation
    ```
    message : aaa
    key : bbb
    hasil generate HMAC-SHA256 : 20BKS3PWnD3XU4JbSSZvVlGi2WWnDa8Sv9uHJ+wsELA=
    ```
    
    ## Code Examples
    
    ### Java
    ```java
    import java.io.ByteArrayOutputStream;
    import java.io.IOException;
    import java.io.UnsupportedEncodingException;
    import java.net.URLEncoder;
    import java.security.GeneralSecurityException;

    import javax.crypto.Mac;
    import javax.crypto.spec.SecretKeySpec;

    import org.springframework.security.crypto.codec.Base64;

    public class BpjsApi {

        public static void main(String[] args) throws GeneralSecurityException, IOException {

            String secretKey = "secretKey";
            String salt = "0123456789";

            String generateHmacSHA256Signature = generateHmacSHA256Signature(salt, secretKey);
            System.out.println("Signature: " + generateHmacSHA256Signature);

            String urlEncodedSign = URLEncoder.encode(generateHmacSHA256Signature, "UTF-8");

            System.out.println("Url encoded value: " + urlEncodedSign);
        }

        public static String generateHmacSHA256Signature(String data, String key) throws GeneralSecurityException {
            byte[] hmacData = null;

            try {
                SecretKeySpec secretKey = new SecretKeySpec(key.getBytes("UTF-8"), "HmacSHA256");
                Mac mac = Mac.getInstance("HmacSHA256");
                mac.init(secretKey);
                hmacData = mac.doFinal(data.getBytes("UTF-8"));
                return new Base64Encoder().encode(hmacData);
            } catch (UnsupportedEncodingException e) {
                throw new GeneralSecurityException(e);
            }
        }
    }
    ```
    
    ### PHP
    ```php
                                            <?php 
       $data = "testtesttest";
       $secretKey = "secretkey";
             // Computes the timestamp
              date_default_timezone_set('UTC');
              $tStamp = strval(time()-strtotime('1970-01-01 00:00:00'));
               // Computes the signature by hashing the salt with the secret key as the key
       $signature = hash_hmac('sha256', $data."&".$tStamp, $secretKey, true);
     
       // base64 encode…
       $encodedSignature = base64_encode($signature);
     
       // urlencode…
       // $encodedSignature = urlencode($encodedSignature);
     
       echo "X-cons-id: " .$data ." ";
       echo "X-timestamp:" .$tStamp ." ";
       echo "X-signature: " .$encodedSignature;
    ?>
    ```

    ### C#
    ```csharp
    namespace BpjsIntegration
    {
        class Program
        {
     
            static void Main()
            {
                var data = "testtesttest";
                var secretKey = "secretkey";
     
                // Initialize the keyed hash object using the secret key as the key
                HMACSHA256 hashObject = new HMACSHA256(Encoding.UTF8.GetBytes(secretKey));
     
                // Computes the signature by hashing the salt with the secret key as the key
                var signature = hashObject.ComputeHash(Encoding.UTF8.GetBytes(data));
     
                // Base 64 Encode
                var encodedSignature = Convert.ToBase64String(signature);
     
                // URLEncode
                // encodedSignature = System.Web.HttpUtility.UrlEncode(encodedSignature);
     
                Console.WriteLine("Voila! A signature: " + encodedSignature);
     
                Console.ReadKey();
     
            }
        }
    }
    ```

    ### VB.Net
    ```vb.net
            Imports System.Security.Cryptography
        Imports System.Text
     
        Namespace BpjsIntegration
            Class Program
     
                Private Shared Sub Main()
                    Dim data = "testtesttest"
                    Dim secretKey = "secretkey"
     
                    ' Initialize the keyed hash object using the secret key as the key
                    Dim hashObject As New HMACSHA256(Encoding.UTF8.GetBytes(secretKey))
     
                    ' Computes the signature by hashing the salt with the secret key as the key
                    Dim signature = hashObject.ComputeHash(Encoding.UTF8.GetBytes(data))
     
                    ' Base 64 Encode
                    Dim encodedSignature = Convert.ToBase64String(signature)
     
                    ' URLEncode
                    ' encodedSignature = System.Web.HttpUtility.UrlEncode(encodedSignature)
     
                    Console.WriteLine("Voila! A signature: " & encodedSignature)
     
                    Console.ReadKey()
     
                End Sub
            End Class
        End Namespace
    ```

    ### Ruby
    ```ruby
            # Required Libraries
    require 'openssl'
    require 'base64'
    require 'URI'
     
    data = "testtesttest"
    secret_key = "secretkey"
     
    # URL encode
    def urlncode(string)
    URI.escape(string, Regexp.new("[Generating an API Signature^#{URI::PATTERN::UNRESERVED}]"))
    end
     
    # Computes the signature by hashing the salt with the secret key as the key
    hash = OpenSSL::HMAC.digest('sha256', secret_key, data)
     
    # base64 encode...
    # signature = urlncode(Base64.encode64(hash));
    ```
    
    ### Python
    ```python
    import hashlib
    import random
    import base64
    import urllib
    import hmac
     
    data = "testtesttest"
    secretkey = "secretkey"
     
    # Computes the signature by hashing the data with the secret key as the key
    signature = hmac.new(secretkey, msg=data, digestmod=hashlib.sha256).digest()
     
    # base64 encode...
    encodedSignature = base64.encodestring(signature).replace('\n', '')
     
    # urlencode...
    # encodedSignature = urllib.quote(encodedSignature)
     
    print "Voila! A signature: " + encodedSignature
    ```

    ### Cocoa (IOS & Mac)
    ```Cocoa
     -(NSUInteger)GenerateSalt
    {
        // random number (change the modulus to the length you'd like)
        NSUInteger r = arc4random() % 100000;
        return r;
    }
     
    -(NSString *)GenerateSignatureUsingSalt:(NSUInteger)salt
    {
        /*
         Make sure you import:
         */
     
        NSString *key = SECRET_KEY;                                            // define your Secret Key string
        NSString *data = [NSString stringWithFormat:"%u", salt];            // convert your random number
     
        const char *cKey  = [key cStringUsingEncoding:NSUTF8StringEncoding];
        const char *cData = [data cStringUsingEncoding:NSUTF8StringEncoding];
     
        unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];
     
        // Hash the salt with the secret key
        CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
     
        // Create a data structure
        NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC
                                              length:sizeof(cHMAC)];
     
        // Base64-encode the signature
        NSString *hash = [HMAC base64Encoding];
      
        return signatureURL;
     
    }
    ```

servers:
  - url: https://apijkn-dev.bpjs-kesehatan.go.id/pcare-rest-dev
    description: PCare Development Server

components:
  securitySchemes:
    pcareAuth:
      type: apiKey
      in: header
      name: X-cons-id
      description: Consumer ID dari BPJS Kesehatan
    pcareTimestamp:
      type: apiKey
      in: header
      name: X-timestamp
      description: Generated unix-based timestamp
    pcareSignature:
      type: apiKey
      in: header
      name: X-signature
      description: Generated signature dengan pola HMAC-256
    pcareAuthorization:
      type: apiKey
      in: header
      name: X-authorization
      description: Generated signature dengan pola Base64
    userKey:
      type: apiKey
      in: header
      name: user_key
      description: User key untuk akses webservice

paths:
  /auth/signature:
    get:
      tags: [Authentication]
      summary: Generate Signature
      description: |
        Panduan untuk generate signature HMAC-SHA256 untuk PCare API
        
        ## Formula
        ```
        signature = HMAC-SHA256(consId + "&" + timestamp, secretKey)
        ```
        
        ## Parameters
        - `consId`: Consumer ID dari BPJS Kesehatan
        - `timestamp`: Unix-based timestamp
        - `secretKey`: Consumer Secret (tidak dikirim ke server)
        
        ## Example
        ```
        consId: 1234
        timestamp: 433223232
        secretKey: pwd
        data: 1234&433223232
        signature: HMAC-SHA256(data, secretKey)
        ```
      responses:
        '200':
          description: Signature generation guide
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Signature generation guide"
                  formula:
                    type: string
                    example: "HMAC-SHA256(consId + '&' + timestamp, secretKey)"
